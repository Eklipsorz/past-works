<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>heap on CS Pensieve</title>
    <link>https://Eklipsorz.github.io/tags/heap/</link>
    <description>Recent content in heap on CS Pensieve</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Wed, 05 Aug 2020 20:25:08 +0800</lastBuildDate>
    
	<atom:link href="https://Eklipsorz.github.io/tags/heap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Another Point of View： Heap Structure</title>
      <link>https://Eklipsorz.github.io/blog/heapinfo/</link>
      <pubDate>Wed, 05 Aug 2020 20:25:08 +0800</pubDate>
      
      <guid>https://Eklipsorz.github.io/blog/heapinfo/</guid>
      <description>Heap 概略 粗略地介紹Heap的構造、特性、實現  Structure Property：它是一種特殊的資料結構，其結構如同字面上的意思一樣，每個物件$Obj_i$會堆放其他物件上，最後形成一 座堆狀物：   .center { text-align: center; }   Heap Order Property：根據物件所儲存的資料來堆放其他物件上，比如以每個物件所儲存的數值來比較大小，數值比較小的節點會 堆放數值較大的節點上。
 每當從這個結構取出物件時，會優先從結構頂端來取。
 通常使用樹狀結構來實現，在這實現上不能夠違背前面三個提到的性質，實現上會有Initialization、Insert、Delete等Method。
 應用：Priority Queue、Sorting。
  Note: 似乎有很多人誤解Heap結構就是Tree結構，但其實這兩者是獨立的存在，Heap只是描述著堆狀結構，而Tree只是剛好可以拿來實現堆狀結構的另種結構。
Structure Property 定義該結構會是什麼 在這個結構內，每個物件都堆放在其他物件上，進而使整體結構像是堆狀物，當我們指定被堆放的最大物件數時，我們會稱之為$k$-ary Heap，$k$為物件數 ，如果$k = 2$就代表著每個物件只能堆放在$0-2$個物件上(如下圖中的左半邊)，而如果$k = 3$就代表著每個物件只能堆放在$0-3$個物件上，不管$k$是為何 ，Heap下的每個節點會像下圖中那樣排列著，而圖中的obj指的就是堆放物，而$1-k$指的是被堆放物。
 .center { text-align: center; }   理想狀態下，我們可以透過本性質將每個節點堆成一座小山，最後再將每座小山構成一座大山，比如說在Binary Heap下，原本每個節點構成的小山(下圖左半邊) 會被堆放在一起形成一座大山(下圖右半邊)。
 .center { text-align: center; }   Heap Order Property 根據Structure Property提到的內容，這些物件會構成一個堆狀物，但內容卻沒指定這些物件彼此間關係是為何，而且當要從堆狀物取出物件時，取出的物件會在 不確定的情況下變得毫無意義，因爲我們並不能知道每此取出的物件會是什麼，所以為了讓取的物件更加有意義而添加Heap Order Property。</description>
    </item>
    
  </channel>
</rss>